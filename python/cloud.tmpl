// ${type} (generated from point.tmpl)

typedef struct {    // the point
  PyObject_HEAD
  PyObject *cl;
  size_t ix;
} ${type}C;

typedef struct {    // the points
  PyObject_HEAD
  PyObject *cl;
} PointCloudPoints_${type}C;

typedef struct {    // the pointcloud
  PyObject_HEAD
  pcl::PointCloud<pcl::${type}> i;
} PointCloud_${type}C;

#silent allm = ','.join($members)

// int make${type}(PyObject *self, PyObject *args, PyObject *kwds)
// {
//   ${type}C *object = ((${type}C *)self);
//   float ${allm};
// 
//   if (PyArg_ParseTuple(args,
//   #echo '"' + 'f' * len($members) + '"'
//   ,
//   #echo ','.join(["&" + m for m in $members])
//   )) {
//     new(&object->i) pcl::${type}(${allm});
//     return 0;
//   } else {
//     return -1;
//   }
// }

static PyObject *
${type}_Repr(PyObject *self)
{
  ${type}C *p = ((${type}C *)self);
  PyObject *cloud = p->cl;
  size_t ix = p->ix;
  PointCloud_${type}C *pcloud = (PointCloud_${type}C*)cloud;
  char buf[50];
  sprintf(buf, "{%f,%f,%f}",
    pcloud->i.points[ix].x,
    pcloud->i.points[ix].y,
    pcloud->i.points[ix].z);
  return PyString_FromString(buf);
}

#for $m in $members:

// ${type}.${m}

static PyObject *${type}_get${m}(${type}C *self, void *cl)
{
  ${type}C *p = ((${type}C *)self);
  PyObject *cloud = p->cl;
  size_t ix = p->ix;
  PointCloud_${type}C *pcloud = (PointCloud_${type}C*)cloud;
  return PyFloat_FromDouble(pcloud->i.points[ix].${m});
}

static int ${type}_set${m}(${type}C *self, PyObject *value, void *cl)
{
  if (value == NULL) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the this attribute");
    return -1;
  }
  if (!PyNumber_Check(value)) {
    PyErr_SetString(PyExc_TypeError, "The ${m} attribute must be a number");
    return -1;
  }
  ${type}C *p = ((${type}C *)self);
  PyObject *cloud = p->cl;
  size_t ix = p->ix;
  PointCloud_${type}C *pcloud = (PointCloud_${type}C*)cloud;
  pcloud->i.points[ix].${m} = PyFloat_AsDouble(value);
  return 0;
}
#end for

static PyGetSetDef ${type}_getset[] = {
#for $m in $members:
  {"${m}", (getter)${type}_get${m}, (setter)${type}_set${m}, "${m}", NULL},
#end for
  {NULL}
};

static PyTypeObject ${type}_Type = {
  PyObject_HEAD_INIT(&PyType_Type)
  0,
  "pcl.${type}",
  sizeof(${type}C),
  0,
  (destructor)0,
  0,
  (getattrfunc)0,
  0,
  0,
  (reprfunc)${type}_Repr,
  0, 0, 0,

  0, 0, 0, 0, 0, 0,
  
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,

  "${type} objects",  /* tp_doc */
  0,                   /* tp_traverse */
  0,                   /* tp_clear */
  0,                   /* tp_richcompare */
  0,                   /* tp_weaklistoffset */
  0,                   /* tp_iter */
  0,                   /* tp_iternext */
  0,                   /* tp_methods */
  0,                   /* tp_members */
  ${type}_getset      /* tp_getset */
  /* the rest are NULLs */
};

// PointCloud <${type}> (generated from cloud.tmpl)
#silent u="PointCloud_" + $type


static Py_ssize_t ${u}_length(PyObject *o)
{
  PointCloudPoints_${type}C *p = (PointCloudPoints_${type}C *)o;

  PyObject *cloud = p->cl;
  PointCloud_${type}C *pcloud = (PointCloud_${type}C*)cloud;
  return (Py_ssize_t)(pcloud->i.points.size());
}

static PyObject* ${u}_getitem(PyObject *o, Py_ssize_t i)
{
  PointCloudPoints_${type}C *p = (PointCloudPoints_${type}C *)o;
  PyObject *cloud = p->cl;
  Py_INCREF(cloud);
  ${type}C *np = PyObject_New(${type}C, &${type}_Type);
  np->cl = cloud;
  np->ix = i;
  return (PyObject*)np;
}

PySequenceMethods ${u}_seq = {
  ${u}_length,
  0,0,
  ${u}_getitem
};

static PyTypeObject PointCloudPoints_${type}_Type = {
  PyObject_HEAD_INIT(&PyType_Type)
  0,
  "pcl.PointCloudPoints<pcl.$type>",
  sizeof(PointCloudPoints_${type}C),
  0,
  (destructor)0,
  0,
  (getattrfunc)0,
  0,
  0,
  (reprfunc)0,
  0, &${u}_seq, 0,

  0, 0, 0, 0, 0, 0,
  
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,

  "PointCloud objects",  /* tp_doc */
  0,                   /* tp_traverse */
  0,                   /* tp_clear */
  0,                   /* tp_richcompare */
  0,                   /* tp_weaklistoffset */
  0,                   /* tp_iter */
  0,                   /* tp_iternext */
  0,                   /* tp_methods */
  0,                   /* tp_members */
  0
  /* the rest are NULLs */
};

static PyObject *resize_$u (PyObject *self, PyObject *args, PyObject *kwds)
{
  Py_ssize_t i;
  if (!PyArg_ParseTuple(args, "n", &i))
    return NULL;
  PointCloud_${type}C *o = (PointCloud_${type}C*)self;
  o->i.resize((size_t)i);
  Py_RETURN_NONE;
}

static PyMethodDef PointCloud_${type}_methods[] = {
  {"resize", (PyCFunction)resize_$u, METH_KEYWORDS},
  {NULL},
};

#for $m in ["width", "height"]:
static PyObject *${u}_get${m}(PointCloud_${type}C *self, void *cl)
{
  return PyInt_FromLong(self->i.${m});
}

static int ${u}_set${m}(PointCloud_${type}C *self, PyObject *value, void *cl)
{
  if (value == NULL) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the this attribute");
    return -1;
  }
  if (!PyNumber_Check(value)) {
    PyErr_SetString(PyExc_TypeError, "The ${m} attribute must be a number");
    return -1;
  }
  self->i.${m} = PyInt_AsLong(value);
  return 0;
}
#end for

static PyObject *${u}_getpoints(PyObject *self, void *cl)
{
  PointCloudPoints_${type}C *points =
    PyObject_New(PointCloudPoints_${type}C, &PointCloudPoints_${type}_Type);
  points->cl = self;
  Py_INCREF(self);
  return (PyObject*)points;
}

static PyGetSetDef getset_$u [] = {
  {"width", (getter)${u}_getwidth, (setter)${u}_setwidth, "width", NULL},
  {"height", (getter)${u}_getheight, (setter)${u}_setheight, "height", NULL},
  {"points", (getter)${u}_getpoints, (setter)NULL, "points", NULL},
  {NULL}
};

static PyTypeObject PointCloud_${type}_Type = {
  PyObject_HEAD_INIT(&PyType_Type)
  0,
  "pcl.PointCloud<pcl.$type>",
  sizeof(PointCloud_${type}C),
  0,
  (destructor)0,
  0,
  (getattrfunc)0,
  0,
  0,
  (reprfunc)0,
  0, 0, 0,

  0, 0, 0, 0, 0, 0,
  
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,

  "PointCloud objects",  /* tp_doc */
  0,                   /* tp_traverse */
  0,                   /* tp_clear */
  0,                   /* tp_richcompare */
  0,                   /* tp_weaklistoffset */
  0,                   /* tp_iter */
  0,                   /* tp_iternext */
  PointCloud_${type}_methods,                   /* tp_methods */
  0,                   /* tp_members */
  getset_$u                   /* tp_getset */
  /* the rest are NULLs */
};

int makePointCloud_${type}(PyObject *self, PyObject *args, PyObject *kwds)
{
  PointCloud_${type}C *object = ((PointCloud_${type}C *)self);
  new(&object->i) pcl::PointCloud<pcl::${type}>();
  return 0;
}
