Fix a race condition in USB read threads.

Index: OpenNI/Source/OpenNI/Linux/XnUSBLinux.cpp
===================================================================
--- OpenNI.orig/Source/OpenNI/Linux/XnUSBLinux.cpp	2012-09-26 14:12:06.872561528 +0400
+++ OpenNI/Source/OpenNI/Linux/XnUSBLinux.cpp	2012-09-26 14:49:29.111961399 +0400
@@ -1018,9 +1018,12 @@
 		
 		// submit request
 		pBufferInfo->bIsQueued = TRUE;
+		pBufferInfo->bIsSubmitted = TRUE;
 		int rc = libusb_submit_transfer(pTransfer);
 		if (rc != 0)
 		{
+			pBufferInfo->bIsQueued = FALSE;
+			pBufferInfo->bIsSubmitted = FALSE;
 			xnLogError(XN_MASK_USB, "Endpoint 0x%x, Buffer %d: Failed to submit asynch I/O transfer (err=%d)!", pTransfer->endpoint, pBufferInfo->nBufferID, rc);
 		}
 	}
@@ -1040,6 +1043,8 @@
 			XnUSBBuffersInfo* pBufferInfo = &pThreadData->pBuffersInfo[i];
 			libusb_transfer* pTransfer = pBufferInfo->transfer;
 
+			if (!pBufferInfo->bIsSubmitted) continue;
+
 			// wait for the next transfer to be completed, and process it
 			nRetVal = xnOSWaitEvent(pBufferInfo->hEvent, pThreadData->bKillReadThread ? 0 : pThreadData->nTimeOut);
 			if (nRetVal == XN_STATUS_OS_EVENT_TIMEOUT)
@@ -1071,6 +1076,8 @@
 			}
 			else // transfer done
 			{
+				pBufferInfo->bIsSubmitted = FALSE;
+
 				if (pBufferInfo->nLastStatus == LIBUSB_TRANSFER_COMPLETED || // read succeeded
 					pBufferInfo->nLastStatus == LIBUSB_TRANSFER_CANCELLED)   // cancelled, but maybe some data arrived
 				{
@@ -1124,9 +1131,12 @@
 				if (!pBufferInfo->pThreadData->bKillReadThread)
 				{
 					pBufferInfo->bIsQueued = TRUE;
+					pBufferInfo->bIsSubmitted = TRUE;
 					int rc = libusb_submit_transfer(pTransfer);
 					if (rc != 0)
 					{
+						pBufferInfo->bIsQueued = FALSE;
+						pBufferInfo->bIsSubmitted = FALSE;
 						xnLogError(XN_MASK_USB, "Endpoint 0x%x, Buffer %d: Failed to re-submit asynch I/O transfer (err=%d)!", pTransfer->endpoint, pBufferInfo->nBufferID, rc);
 					}
 				}
Index: OpenNI/Source/OpenNI/Linux/XnUSBLinux.h
===================================================================
--- OpenNI.orig/Source/OpenNI/Linux/XnUSBLinux.h	2012-09-26 14:12:06.842560875 +0400
+++ OpenNI/Source/OpenNI/Linux/XnUSBLinux.h	2012-09-26 14:49:29.111961399 +0400
@@ -55,6 +55,8 @@
 	libusb_transfer* transfer;
 	/* TRUE when transfer is queued. */
 	XnBool bIsQueued;
+	/* TRUE when transfer has been submitted. */
+	XnBool bIsSubmitted;
 	/* An event to notify when buffer is ready. */
 	XN_EVENT_HANDLE hEvent;
 	XnUInt32 nBufferID;
