Fix a memory leak and a crash in the Java bindings.

From: Roman Donchenko <roman.donchenko@itseez.com>


---
 Wrappers/OpenNI.java/src/org/OpenNI/Context.java   |   17 ++++++++++++++---
 Wrappers/OpenNI.java/src/org/OpenNI/NodeInfo.java  |    4 +++-
 .../OpenNI.java/src/org/OpenNI/NodeWrapper.java    |    1 +
 .../OpenNI.java/src/org/OpenNI/ProductionNode.java |    4 +++-
 Wrappers/OpenNI.jni/org_OpenNI_NativeMethods.cpp   |    4 +++-
 5 files changed, 24 insertions(+), 6 deletions(-)

diff --git a/Wrappers/OpenNI.java/src/org/OpenNI/Context.java b/Wrappers/OpenNI.java/src/org/OpenNI/Context.java
index 9204c4e..ffab54d 100644
--- a/Wrappers/OpenNI.java/src/org/OpenNI/Context.java
+++ b/Wrappers/OpenNI.java/src/org/OpenNI/Context.java
@@ -85,7 +85,9 @@ public class Context extends ObjectWrapper
 		OutArg<Long> phPlayer = new OutArg<Long>();
 		int status = NativeMethods.xnContextOpenFileRecordingEx(toNative(), fileName, phPlayer);
 		WrapperUtils.throwOnError(status);
-		return (Player)createProductionNodeFromNative(phPlayer.value);
+		Player player = (Player) createProductionNodeFromNative(phPlayer.value);
+		NativeMethods.xnProductionNodeRelease(phPlayer.value);
+		return player;
 	}
 	
 	public void release()
@@ -129,7 +131,9 @@ public class Context extends ObjectWrapper
 		OutArg<Long> phNode = new OutArg<Long>();
 		int status = NativeMethods.xnCreateProductionTree(toNative(), nodeInfo.toNative(), phNode);
 		WrapperUtils.throwOnError(status);
-		return createProductionNodeObject(phNode.value);
+		ProductionNode node = createProductionNodeObject(phNode.value);
+		NativeMethods.xnProductionNodeRelease(phNode.value);
+		return node;
 	}
 	
 	public ProductionNode createAnyProductionTree(NodeType type, Query query) throws GeneralException
@@ -141,7 +145,9 @@ public class Context extends ObjectWrapper
 				phNode,
 				errors.toNative());
 		WrapperUtils.checkEnumeration(status, errors);
-		return createProductionNodeFromNative(phNode.value);
+		ProductionNode node = createProductionNodeFromNative(phNode.value);
+		NativeMethods.xnProductionNodeRelease(phNode.value);
+		return node;
 	}
 
 	public NodeInfoList enumerateExistingNodes() throws GeneralException
@@ -378,6 +384,11 @@ public class Context extends ObjectWrapper
 		return createProductionNodeObject(hNode, type);
 	}
 
+	void removeProductionNodeObject(long hNode)
+	{
+		this.allNodes.remove(hNode);
+	}
+
 	private Observable<ErrorStateEventArgs> errorStateChangedEvent;
 	private Hashtable<Long, ProductionNode> allNodes = new Hashtable<Long, ProductionNode>();
 	
diff --git a/Wrappers/OpenNI.java/src/org/OpenNI/NodeInfo.java b/Wrappers/OpenNI.java/src/org/OpenNI/NodeInfo.java
index 30aac6c..a1171e7 100644
--- a/Wrappers/OpenNI.java/src/org/OpenNI/NodeInfo.java
+++ b/Wrappers/OpenNI.java/src/org/OpenNI/NodeInfo.java
@@ -46,7 +46,9 @@ public class NodeInfo extends ObjectWrapper
 	public ProductionNode getInstance() throws GeneralException
 	{
 		long hNode = NativeMethods.xnNodeInfoGetRefHandle(toNative());
-		return Context.createProductionNodeFromNative(hNode);
+		ProductionNode node = Context.createProductionNodeFromNative(hNode);
+		NativeMethods.xnProductionNodeRelease(hNode);
+		return node;
 	}
 	
 	@Override
diff --git a/Wrappers/OpenNI.java/src/org/OpenNI/NodeWrapper.java b/Wrappers/OpenNI.java/src/org/OpenNI/NodeWrapper.java
index 2391c7d..8585082 100644
--- a/Wrappers/OpenNI.java/src/org/OpenNI/NodeWrapper.java
+++ b/Wrappers/OpenNI.java/src/org/OpenNI/NodeWrapper.java
@@ -47,6 +47,7 @@ public class NodeWrapper extends ObjectWrapper
 
 	protected void freeObject(long ptr)
 	{
+		context.removeProductionNodeObject(ptr);
 		NativeMethods.xnProductionNodeRelease(ptr);
 	}
 	
diff --git a/Wrappers/OpenNI.java/src/org/OpenNI/ProductionNode.java b/Wrappers/OpenNI.java/src/org/OpenNI/ProductionNode.java
index ac98ee1..0fc7451 100644
--- a/Wrappers/OpenNI.java/src/org/OpenNI/ProductionNode.java
+++ b/Wrappers/OpenNI.java/src/org/OpenNI/ProductionNode.java
@@ -30,7 +30,9 @@ public class ProductionNode extends NodeWrapper
 	
 	public static ProductionNode fromNative(long hNode) throws GeneralException
 	{
-		return Context.createProductionNodeFromNative(hNode);
+		ProductionNode node = Context.createProductionNodeFromNative(hNode);
+		NativeMethods.xnProductionNodeRelease(hNode);
+		return node;
 	}
 	
 	public NodeInfo getInfo() throws GeneralException
diff --git a/Wrappers/OpenNI.jni/org_OpenNI_NativeMethods.cpp b/Wrappers/OpenNI.jni/org_OpenNI_NativeMethods.cpp
index 6f8b639..4eabdb1 100644
--- a/Wrappers/OpenNI.jni/org_OpenNI_NativeMethods.cpp
+++ b/Wrappers/OpenNI.jni/org_OpenNI_NativeMethods.cpp
@@ -699,8 +699,10 @@ jobject CreateProductionNodeDescription(JNIEnv *env, const XnProductionNodeDescr
 	jclass cls = env->FindClass("org/OpenNI/ProductionNodeDescription");
 	jmethodID clsCtor = env->GetMethodID(cls, "<init>", "(ILjava/lang/String;Ljava/lang/String;Lorg/OpenNI/Version;)V");
 
+	jstring vendor = env->NewStringUTF(pDesc->strVendor);
+	jstring name = env->NewStringUTF(pDesc->strName);
 	jobject version = CreateVersion(env, &pDesc->Version);
-	return env->NewObject(cls, clsCtor, pDesc->Type, pDesc->strVendor, pDesc->strName, version);
+	return env->NewObject(cls, clsCtor, pDesc->Type, vendor, name, version);
 }
 
 //---------------------------------------------------------------------------
