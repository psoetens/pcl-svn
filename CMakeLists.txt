### ---[ PCL global CMake
cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "possible configurations" FORCE)
# In case of Makefiles if the user does not setup CMAKE_BUILD_TYPE, assume it's Debug
if (${CMAKE_GENERATOR} MATCHES ".*Makefiles")
  if("${CMAKE_BUILD_TYPE}" STREQUAL "")
    set(CMAKE_BUILD_TYPE Debug CACHE STRING "build type default to Debug, set to Release to improve performance" FORCE)
  endif("${CMAKE_BUILD_TYPE}" STREQUAL "")
#if the generator is different for *Makefiles assume it is Release
else(${CMAKE_GENERATOR} MATCHES ".*Makefiles")
	set(CMAKE_BUILD_TYPE Release CACHE STRING "build type default to Release, set to Debug if you are developing PCL" FORCE)
endif(${CMAKE_GENERATOR} MATCHES ".*Makefiles")

project(PCL)
string(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWER)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}
    "${CMAKE_SOURCE_DIR}/cmake/Modules/")

# ---[ Release/Debug specific flags
if(CMAKE_BUILD_TYPE STREQUAL "Release")
    add_definitions("-DBOOST_DISABLE_ASSERTS -DEIGEN_NO_DEBUG")
endif(CMAKE_BUILD_TYPE STREQUAL "Release")
# ---[ Unix/Darwin/Windows specific flags
if(UNIX OR CMAKE_SYSTEM_NAME STREQUAL "Darwin")
add_definitions("-Wall -Wl,--no-undefined -fno-strict-aliasing")
else(UNIX OR CMAKE_SYSTEM_NAME STREQUAL "Darwin")
add_definitions ("-W0 -DEIGEN2_SUPPORT")
endif(UNIX OR CMAKE_SYSTEM_NAME STREQUAL "Darwin")

include(${PCL_SOURCE_DIR}/cmake/pcl_options.cmake)
include(${PCL_SOURCE_DIR}/cmake/pcl_utils.cmake)
set(PCL_VERSION 1.0.0 CACHE STRING "PCL version")
DISSECT_VERSION()
GET_OS_INFO()
SET_INSTALL_DIRS()

set(PCL_RESOURCES_DIR ${PCL_SOURCE_DIR}/resources)
set(PCL_POINTCLOUDS_DIR ${PCL_RESOURCES_DIR}/pointclouds)

# Configure FindPCL.cmake
configure_file("${PCL_SOURCE_DIR}/FindPCL.cmake.in"
    "${PCL_BINARY_DIR}/FindPCL.cmake" @ONLY)
# Add an "uninstall" target
configure_file("${PCL_SOURCE_DIR}/cmake/uninstall_target.cmake.in"
    "${PCL_BINARY_DIR}/uninstall_target.cmake" IMMEDIATE @ONLY)
add_custom_target(uninstall "${CMAKE_COMMAND}" -P
    "${PCL_BINARY_DIR}/uninstall_target.cmake")

###
# this is copy paste form http://www.itk.org/Wiki/CMake_RPATH_handling
# in order to always make a full statement RPATH
###
SET(CMAKE_SKIP_BUILD_RPATH  FALSE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 
SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" is_system_dir)
IF("${is_system_dir}" STREQUAL "-1")
   SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
ENDIF("${is_system_dir}" STREQUAL "-1")

# Find universal dependencies
# Find ROS
include(${PCL_SOURCE_DIR}/cmake/pcl_find_ros.cmake)
# Boost
include(${PCL_SOURCE_DIR}/cmake/pcl_find_boost.cmake)
# SSE flags
include(${PCL_SOURCE_DIR}/cmake/pcl_find_sse.cmake)
PCL_CHECK_FOR_SSE()
# Eigen
find_package(Eigen REQUIRED)
include_directories(${EIGEN_INCLUDE_DIRS})
add_definitions(-DEIGEN_USE_NEW_STDVECTOR
    -DEIGEN_YES_I_KNOW_SPARSE_MODULE_IS_NOT_STABLE_YET)
# FLANN
find_package(Flann REQUIRED)
include_directories(${FLANN_INCLUDE_DIRS})
# CMinpack
find_package(CMinpack REQUIRED)
include_directories(${CMINPACK_INCLUDE_DIRS})
# OpenMP
include(${PCL_SOURCE_DIR}/cmake/pcl_openmp.cmake)
#OpenNI
find_package(OpenNI)
if(OPENNI_FOUND)
    include_directories(${OPENNI_INCLUDE_DIRS})
    message(STATUS "Did find OpenNI after all.")
    #message(STATUS "OpenNI include ${OPENNI_INCLUDE_DIR}")
    #message(STATUS "OpenNI libs ${OPENNI_LIBRARY}")
endif(OPENNI_FOUND)

# Create the config.h file
set(pcl_config_h_in "${CMAKE_CURRENT_SOURCE_DIR}/pcl_config.h.in")
set(pcl_config_h "${CMAKE_CURRENT_BINARY_DIR}/include/pcl/pcl_config.h")
configure_file(${pcl_config_h_in} ${pcl_config_h})
PCL_ADD_INCLUDES(common "" ${pcl_config_h})
include_directories(${CMAKE_CURRENT_BINARY_DIR}/include)

# Set up for tests
include(${PCL_SOURCE_DIR}/cmake/pcl_tests.cmake)

# Add the library subdirectories
include(${PCL_SOURCE_DIR}/cmake/pcl_targets.cmake)
add_subdirectory(common)
add_subdirectory(io)
add_subdirectory(kdtree)
add_subdirectory(range_image)
add_subdirectory(features)
add_subdirectory(sample_consensus)
add_subdirectory(keypoints)
add_subdirectory(filters)
add_subdirectory(registration)
add_subdirectory(segmentation)
add_subdirectory(surface)
add_subdirectory(octree)
add_subdirectory(visualization)
add_subdirectory(test)

# Documentation
add_subdirectory(doc)

# Package creation
set(CPACK_GENERATOR "DEB;RPM;NSIS;")
include(InstallRequiredSystemLibraries)
include(${PCL_SOURCE_DIR}/cmake/pcl_cpack.cmake)
PCL_MAKE_CPACK_INPUT()
set(CPACK_PROJECT_CONFIG_FILE "${PCL_CPACK_CFG_FILE}")
include(CPack)

# Make a pretty picture of the dependency graph
include(${PCL_SOURCE_DIR}/cmake/dep_graph.cmake)
MAKE_DEP_GRAPH()

# Finish up
PCL_WRITE_STATUS_REPORT()
PCL_RESET_MAPS()

